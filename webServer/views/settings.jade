extends navbar_fixed_top

block content
	link(rel='stylesheet', href='/css/settings.css')
	- var n = 0
	- var notNuclear = true
	- console.log("Rows for setting are:")
	- console.log(rows)
	if rows.length > 0
		- var currCategory = rows[0]["category"]
		.container.main
			while n < rows.length
				.jumbotron.categories
					if rows[n]['type'] != "Nuclear"
						button.btn.btn-danger.delete-category(style="float:right;") x
						label.control-label.editH2(for="category")
							h2.text-info= rows[n]["category"]
							input.form-control(type="hidden", value= rows[n]["category"])
					else
						label.control-label(for="category")
							h2.text-info= rows[n]["category"]
							input.form-control(type="hidden", value= rows[n]["category"])
					br
					label.control-label(for="allowedTime") Allowed Time:
						div.input-group.timeAllowed
							if rows[n]['type'] != "Nuclear"
								input.form-control.time.allowed.hours(type="number",placeholder=(Math.floor(parseInt(rows[n]["timeAllowed"])/3600)).toString(),value=(Math.floor(parseInt(rows[n]["timeAllowed"])/3600)).toString(), min="0", max="23", aria-describedby="sizing-addon2")
								span.input-group-addon  hours
								input.form-control.time.allowed.minutes(type="number",placeholder=(Math.floor(parseInt(rows[n]["timeAllowed"])/60)%60).toString(), value=(Math.floor(parseInt(rows[n]["timeAllowed"])/60)%60).toString(), min="0",max="59", aria-describedby="sizing-addon2")
								span.input-group-addon  minutes
							else
								input.form-control.time.allowed.hours(type="number", disabled="",placeholder=(Math.floor(parseInt(rows[n]["timeAllowed"])/3600)).toString(),value=(Math.floor(parseInt(rows[n]["timeAllowed"])/3600)).toString(), min="0",max="23", aria-describedby="sizing-addon2")
								span.input-group-addon  hours
								input.form-control.time.allowed.minutes(type="number", disabled="",placeholder=(Math.floor(parseInt(rows[n]["timeAllowed"])/60)%60).toString(), value=(Math.floor(parseInt(rows[n]["timeAllowed"])/60)%60).toString(), min="0", max="59",aria-describedby="sizing-addon2")
								span.input-group-addon  minutes
					br
					label.control-label(for="timeRemaining") Remaining Time:
						div.input-group.timeRemaining
							input.form-control.time(type="number", disabled="",value=(Math.floor(parseInt(rows[n]["timeRemaining"])/3600)).toString(), min="0",max="23", aria-describedby="sizing-addon2")
							span.input-group-addon  hours
							input.form-control.time(type="number",disabled="", min="0", max="59",value=(Math.floor(parseInt(rows[n]["timeRemaining"])/60)%60).toString(), aria-describedby="sizing-addon2")
							span.input-group-addon  minutes
							input.form-control.time.allowed.seconds(type="number",placeholder=(Math.floor(parseInt(rows[n]["timeRemaining"]))%60).toString(), disabled="", value=(Math.floor(parseInt(rows[n]["timeRemaining"]))%60).toString(), min="0",max="59", aria-describedby="sizing-addon2")
							span.input-group-addon  seconds
					div.form-group
						label(for="sel1") Reset Interval:
							if rows[n]['type'] != "Nuclear"
								select.form-control.reset-interval(id="sel1")
									each val,index in resetIntervals
										if parseInt(index) == rows[n]["resetInterval"]
											option(selected="selected", value=index)= val
										else
											option(value=index)= val
								input(type="hidden", value= rows[n]["resetInterval"])
							else
								select.form-control.reset-interval(id="sel1",disabled="")
									each val,index in resetIntervals
										if parseInt(index) == rows[n]["resetInterval"]
											option(selected="selected", value=index)= val
										else
											option(value=index)= val
								input(type="hidden", value= rows[n]["resetInterval"])
							-console.log(rows[n])

					div.form-group
						label(for="sel1") Type:
							if rows[n]['type'] != "Nuclear"
								select.form-control.type(id="sel1")
									each type in setting_types
										if type != rows[n]["type"]
											option= type
										else
											option(selected="selected")=type 
								input(type="hidden", value= rows[n]["type"])
							else
								select.form-control.type(id="sel1",disabled="")
									each type in setting_types
										if type != rows[n]["type"]
											option= type
										else
											option(selected="selected")=type 
								input(type="hidden", value= rows[n]["type"])
					label Restricted Urls
					while n < rows.length && currCategory === rows[n]["category"]
						if(("domainName" in rows[n]))
							.input-group.url()
								if rows[n]['type'] != "Nuclear"
									span.input-group-btn.edit-url-btn
										button.btn.btn-default(  type="button") Edit!
								input.form-control(type="text", value= rows[n]["domainName"], disabled='')
								if rows[n]['type'] != "Nuclear"
									span.input-group-btn.delete-url
										button.btn.btn-default(type='button') Delete!
									- notNuclear = true
								else
									- notNuclear = false

							input(type="hidden", value= rows[n]["domainName"])
						- n++
					if (notNuclear)
						button.btn.btn-default.add-url(type='button') +

					

				if n < rows.length
					-currCategory = rows[n]["category"]
	else
		.container.main